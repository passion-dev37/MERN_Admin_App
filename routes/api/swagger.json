{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My MERN Stack Admin App API",
    "description": "REST API documentation for My MERN Stack Admin App",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "contact": { "email": "zdy120939259@outlook.com" }
  },
  "servers": [
    {
      "url": "/",
      "description": "localhost:5001"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "API for user authentication"
    },
    {
      "name": "users",
      "description": "API for users"
    },
    {
      "name": "TFA",
      "description": "google two-factor authentication"
    },
    {
      "name": "admin",
      "description": "administrative apis, including user activity logs and potentially more"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/api/auth/user": {
      "get": {
        "tags": ["auth"],
        "summary": "gets the current user",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "x-auth-token",
            "in": "header",
            "description": "an authorization header",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "OK ",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "wrong jwt token probably. (can't fix the above error. If anybody sees this and care to fix it please email me the fix. Thanks :))"
          }
        }
      }
    },
    "/api/auth": {
      "post": {
        "tags": ["auth"],
        "summary": "authenticate user by email and password. Email is used to find the user object in db. Password is encrypted with 'bcrypt' and compared with the corresponding encrypted password in db",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email and password of the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailAndPassword"
            }
          }
        ],

        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          },
          "400": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/api/TFA": {
      "post": {
        "tags": ["TFA"],
        "summary": "gets the TFA setup if it exists in db using the user email and domainName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email of the user and domainName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TFAReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TFA"
            }
          },
          "400": {
            "description": "unauthorized. Probably because TFA does not exist in DB"
          }
        }
      }
    },
    "/api/TFA/setup": {
      "post": {
        "tags": ["TFA"],
        "summary": "setup TFA using the provided email and domainName.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email of the user and domainName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TFAReq"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TFA"
            }
          },
          "400": {
            "description": "unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete TFA with given email",
        "tags": ["TFA"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email of the user and domainName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TFAReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "Failed. TFA not found."
          }
        }
      }
    },
    "/api/TFA/verify": {
      "post": {
        "tags": ["TFA"],
        "summary": "verify TFA using the user email and code",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email of the user and code",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TFAVerifyReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "verification successfull"
          },
          "400": {
            "description": "unauthorized. Probably because code is not correct from my experience :)"
          }
        }
      }
    },

    "/api/users/": {
      "get": {
        "tags": ["users"],
        "summary": "get all registered users",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Auth" }
            }
          },
          "401": {
            "description": "unauthorized because of the 'auth' middleware"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "register a user with email, name, password and role.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "name, email, password and role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserReq"
            }
          }
        ],

        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Register Failed. Bad user data."
          }
        }
      }
    },
    "/api/users/{id}": {
      "patch": {
        "summary": "update user profile (not implemented)",
        "tags": ["users"],
        "requestBody": {
          "description": "a user object containing things needed to be updated for the user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/UserReq"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "update user profile with the id of user"
          },
          {
            "name": "x-auth-token",
            "in": "header",
            "description": "an authorization header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "user not found probably?"
          }
        }
      },
      "delete": {
        "summary": "Delete user with given id",
        "tags": ["users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete user with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          {
            "name": "x-auth-token",
            "in": "header",
            "description": "an authorization header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        }
      }
    },
    "/api/users/{id}/logs": {
      "patch": {
        "summary": "update logs of a specified user",
        "tags": ["users"],

        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "update logs of a specified user with id",
            "type": "string"
          },
          {
            "name": "x-auth-token",
            "in": "header",
            "description": "an authorization header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the log to be added to the logs collection of the specified user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "user not found probably?"
          }
        }
      }
    },
    "/api/admin/logs": {
      "get": {
        "tags": ["admin"],
        "summary": "get all logs",

        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Log" }
            }
          },
          "401": {
            "description": "unauthorized because of the 'auth' middleware"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "support": {
          "type": "string"
        },
        "_id": {
          "type": "array"
        },
        "name": {
          "type": "date"
        },
        "email": {
          "type": "string"
        },
        "team": {
          "type": "string"
        },
        "register_date": {
          "type": "string"
        },
        "schema": {
          "type": "array",
          "logs": { "$ref": "#/definitions/Log" }
        }
      }
    },
    "EmailAndPassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "Auth": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        }
      }
    },
    "TFA": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        },
        "dataURL": {
          "type": "string"
        },
        "TFAURL": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "date_established": {
          "type": "date"
        }
      }
    },
    "TFAReq": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "TFAVerifyReq": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "id": {
      "properties": {
        "_id": {
          "type": "string"
        }
      }
    },
    "logsPatchReq": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "object",
          "properties": {
            "insertAnArrayOfLogsHere": {
              "type": "string"
            }
          }
        },
        "log": {
          "$ref": "#/definitions/Log"
        }
      }
    },

    "Log": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "explanation": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "date_logged": {
          "type": "string"
        }
      }
    },
    "LogReq": {
      "type": "object",
      "properties": {
        "log": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "explanation": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "company": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
